AWSTemplateFormatVersion: '2010-09-09'
Description: >
  QS(0023) - This template deploys a SharePoint 2016 single-server topology. This template is intended to be
  installed into an existing VPC that was built using the sample reference architecture
  titled "Implementing Active Directory Domain Services in the AWS Cloud" **WARNING**
  This template creates Amazon EC2 Windows instance and related resources. You will be
  billed for the AWS resources used if you create a stack from this template.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - KeyPairName
          - VPCID
          - VPCCIDR
          - SubnetID
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - SPServerInstanceType
          - WS2019FULLBASE
          - SPServerNetBIOSName
      - Label:
          default: Microsoft Active Directory configuration
        Parameters:
          - DomainDNSName
          - DomainNetBIOSName
          - ADAdminUserName
          - ADAdminPassword
          - ADMemberSecurityGroup
      - Label:
          default: Microsoft SQL Server configuration
        Parameters:
          - SQLServerAccessSecurityGroup
          - SPDatabaseName
          - SQLAdminUserName
          - SQLAdminPassword
      - Label:
          default: Microsoft SharePoint configuration
        Parameters:
          - SPBinaryBucket
          - SPBinaryKey
          - SPProductKey
    ParameterLabels:
      WS2019FULLBASE:
        default: Windows Server 2019 full base AMI
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      SPServerInstanceType:
        default: SharePoint server instance type
      SubnetID:
        default: ID of the subnet
      SPServerNetBIOSName:
        default: SharePoint server NetBIOS name
      KeyPairName:
        default: Key pair name
      VPCCIDR:
        default: VPC CIDR
      DomainDNSName:
        default: Domain DNS name
      DomainNetBIOSName:
        default: Domain NetBIOS name
      ADAdminUserName:
        default: Admin user name
      ADAdminPassword:
        default: Admin password
      SQLAdminUserName:
        default: SQL Server admin user name
      SQLAdminPassword:
        default: SQL Server admin password
      ADMemberSecurityGroup:
        default: Security group ID
      SQLServerAccessSecurityGroup:
        default: Security group ID
      SPBinaryBucket:
        default: SharePoint binary bucket
      SPBinaryKey:
        default: SharePoint binary key
      SPDatabaseName:
        default: Database server name
      SPProductKey:
        default: SharePoint product key

Parameters:
  WS2019FULLBASE:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base'
    Description: The Amazon-provided AMI for Windows Server 2019. If you want to use a different AMI, specify the AWS Systems Manager Parameter Store parameter namespace that provides your AMI ID. 
  SPServerInstanceType:
    AllowedValues:
      - t2.xlarge
      - t2.2xlarge
      - t3.xlarge
      - t3.2xlarge
      - m4.xlarge
      - m4.2xlarge
      - m5.xlarge
      - m5.2xlarge
    Default: m4.xlarge
    Description: EC2 instance type for the SharePoint server.
    Type: String
  SubnetID:
    Description: ID of the private subnet into which SharePoint will be deployed (e.g., subnet-a0246dcd).
    Type: AWS::EC2::Subnet::Id
  SPServerNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: SPServer
    Description: NetBIOS name of the SharePoint server (up to 15 characters).
    MaxLength: '15'
    MinLength: '1'
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance after it launches
    Type: AWS::EC2::KeyPair::KeyName
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.
    Type: String
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: example.com
    Description: Fully qualified domain name (FQDN) of the domain to join.
    MaxLength: '255'
    MinLength: '2'
    Type: String
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: example
    Description: NetBIOS name of the domain to join (up to 15 characters) for users of earlier versions of Windows.
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ADAdminUserName:
    AllowedPattern: '^[0-9a-zA-Z\\0-9a-zA-Z-]*$'
    Description: The user name of an account with rights to the domain (without the domain name).
    MaxLength: '255'
    MinLength: '1'
    Type: String
  ADAdminPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: The password of the Active Directory administrator account.
    MaxLength: '32'
    MinLength: '8'
    Type: String
    NoEcho: true
  ADMemberSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The ID of the security group that will allow access to the domain controllers for domain join and other actions.
  SQLAdminUserName:
    AllowedPattern: '^[0-9a-zA-Z\\0-9a-zA-Z-]*$'
    Description: The user name of an account with rights to the server running SQL Server (without the domain name).
    MaxLength: '255'
    MinLength: '1'
    Type: String
  SQLAdminPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: The password of the SQL Server admin account.
    MaxLength: '32'
    MinLength: '8'
    Type: String
    NoEcho: true
  SQLServerAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The ID of the security group that will allow communication with the server (or servers) running SQL Server.
  SPBinaryBucket:
    Type: String
    Description: The name of the S3 bucket that contains your SharePoint binaries.
    MinLength: 2
    MaxLength: 255
  SPBinaryKey:
    Type: String
    Description: The path (key) to the installer .zip file in the S3 bucket.
    MinLength: 2
    MaxLength: 255
  SPDatabaseName:
    Type: String
    Description: The name of the server running SQL Server that will store the SharePoint databases.
    MinLength: 3
    MaxLength: 128
  SPProductKey:
    Type: String
    Description: The product key to use with SharePoint. The default key is for SharePoint 2019 Enterprise Trial.
    MinLength: 29
    MaxLength: 29
    Default: M692G-8N2JP-GG8B2-2W2P7-YY7J6 # Default SharePoint 2019 Enterprise Trial Key

Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC
  CheckSupportedInstances:
    RuleCondition: !Or
      - !Contains
        - - m4.xlarge
          - m4.2xlarge
        - !Ref 'SPServerInstanceType'
      - !Contains
        - - m4.xlarge
          - m4.2xlarge
        - !Ref 'SPServerInstanceType'
    Assertions:
      - Assert: !Not
          - !Contains
            - - eu-west-3
            - !Ref 'AWS::Region'
        AssertDescription: M4 instances are not available in the Paris region

Conditions:
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1

Resources:

  DSCBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter30Days
            ExpirationInDays: 30
            Status: Enabled
            Prefix: 'logs/'

  SharePointServerRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Ref ADAdminSecret
                  - !Ref SQLAdminSecret
                  - !Ref SPSetupAccount
                  - !Ref SPFarmAccount
                  - !Ref SPWebAppAccount
                  - !Ref SPSvcAppAccount
                  - !Ref SPCrawlAccount
                  - !Ref SPUPSyncAccount
                  - !Ref SPSuperUserAccount
                  - !Ref SPReaderAccount
                  - !Ref SPPassPhrase
              - Effect: Allow
                Action:
                  - ec2:DescribeTags
                  - ec2:DescribeInstances
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${SPBinaryBucket}/${SPBinaryKey}"
          PolicyName: aws-quickstart-SPServer
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'

  SharePointServerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'SharePointServerRole'
      Path: /

  SharePointServerWaitConditionHanle:
    Type: AWS::CloudFormation::WaitConditionHandle

  SharePointServerWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn:
      - SharePointServer
    Properties:
      Handle: !Ref SharePointServerWaitConditionHanle
      Timeout: 7200 

  SharePointServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'WS2019FULLBASE'
      IamInstanceProfile: !Ref 'SharePointServerProfile'
      InstanceType: !Ref 'SPServerInstanceType'
      SubnetId: !Ref 'SubnetID'
      Tags:
        - Key: Name
          Value: !Ref 'SPServerNetBIOSName'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '80'
            VolumeType: gp2
        - DeviceName: /dev/xvdd
          Ebs:
            VolumeSize: '100'
            VolumeType: gp2
      SecurityGroupIds:
        - !Ref SharePointSG
        - !Ref ADMemberSecurityGroup
        - !Ref SQLServerAccessSecurityGroup
      KeyName: !Ref 'KeyPairName'
      UserData:
        Fn::Base64: !Sub |
          <script>
          cfn-init.exe -v -c config -s ${AWS::StackId} -r SharePointServer --region ${AWS::Region}
          </script>
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref SharePointServerRole
      AWS::CloudFormation::Init:
        configSets:
          config:
            - setup
            - downloadBinaries
        setup:
          files:
            "c:\\cfn\\cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.SharePointServer.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe -v -c config -s ${AWS::StackId} -r SharePointServer --region ${AWS::Region}
          services:
            windows:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - "c:\\cfn\\cfn-hup.conf"
                  - "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
          commands:
            1-create-reg-key:
              command: powershell.exe -command New-Item -Path HKLM:\SOFTWARE\Amazon\ -Name QuickStart -ErrorAction Continue
            2-set-wait-url:
              command: !Sub powershell.exe -command "Set-ItemProperty -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart -Name SignalUrl -Value '${SharePointServerWaitConditionHanle}' -ErrorAction Continue"
        downloadBinaries:
          files:
            "C:\\config\\sources\\installer.zip":
              source: !Sub https://${SPBinaryBucket}.s3.amazonaws.com/${SPBinaryKey}
              authentication: S3AccessCreds

  SharePointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SharePoint Server Security Group (for Single Server deployments only)
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 9999
          ToPort: 9999
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref VPCCIDR

  WriteMOFRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: WriteMOFRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:putObject
              Resource:
                - !Sub "${DSCBucket.Arn}"
                - !Sub "${DSCBucket.Arn}/*"

  WriteMOFFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          var AWS = require('aws-sdk'), s3 = new AWS.S3();
          const response = require("cfn-response");

          exports.handler = async (event, context) => {
            console.log(JSON.stringify(event));

            if (event.RequestType === 'Delete') {
                await postResponse(event, context, response.SUCCESS, {})
                return;
            }

            function postResponse(event, context, status, data){
                return new Promise((resolve, reject) => {
                    setTimeout(() => response.send(event, context, status, data), 5000)
                });
            }

            await s3.putObject({
              Body: event.ResourceProperties.Body,
              Bucket: event.ResourceProperties.Bucket,
              Key: event.ResourceProperties.Key
            }).promise();
            await postResponse(event, context, response.SUCCESS, {});
          };
      Handler: index.handler
      Role: !GetAtt WriteMOFRole.Arn
      Runtime: nodejs10.x
      Timeout: 10

  WriteSingleServerMOF:
    Type: Custom::WriteMOFFile
    Properties:
      ServiceToken: !GetAtt WriteMOFFunction.Arn
      Bucket: !Ref DSCBucket
      Key: !Sub "SP-Single-${AWS::StackName}.mof"
      Body: !Sub |
        instance of MSFT_EnvironmentResource as $MSFT_EnvironmentResource1ref
        {
        ResourceID = "[Environment]VersionStamp::[SharePointServer]x::[SharePointServer]x";
         Value = "${GenerateUsernames.prefix}";
         Name = "SPQuickStartPrefix";
         ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "0.0";
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_ScriptResource as $MSFT_ScriptResource1ref
        {
        ResourceID = "[Script]WaitForBinaries::[SharePointServer]x::[SharePointServer]x";
         GetScript = " return @{} ";
         TestScript = "\n                return (Get-Item C:\\config\\sources\\installer.zip -ErrorAction SilentlyContinue).Length -ne 0\n            ";
         SetScript = "\n                $count = 0\n                while ((Get-Item C:\\config\\sources\\installer.zip -ErrorAction SilentlyContinue).Length -eq 0 -and $count -lt 10) {\n                    $count++\n                    Start-Sleep -Seconds 30\n                }\n            ";
         ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "0.0";
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential1ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${ADAdminSecret}";
        };
        instance of MSFT_Computer as $MSFT_Computer1ref
        {
        ResourceID = "[Computer]DomainJoin::[SharePointServer]x::[SharePointServer]x";
         Credential = $MSFT_Credential1ref;
         DomainName = "${DomainDNSName}";
         Name = "{tag:Name}";
         ModuleName = "ComputerManagementDsc";
         ModuleVersion = "6.2.0.0";
        DependsOn = {
            "[Script]WaitForBinaries::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFTDSC_Disk as $MSFTDSC_Disk1ref
        {
        ResourceID = "[Disk]SecondaryDisk::[SharePointServer]x::[SharePointServer]x";
         PartitionStyle = "MBR";
         DiskId = "1";
         FSFormat = "NTFS";
         DriveLetter = "D";
         ModuleName = "StorageDsc";
         ModuleVersion = "4.6.0.0";
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_RegistryResource as $MSFT_RegistryResource1ref
        {
        ResourceID = "[Registry]DisableIPv6::[SharePointServer]x::[SharePointServer]x";
         ValueName = "DisabledComponents";
         Key = "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Tcpip6\\Parameters";
         Ensure = "Present";
         ValueType = "Dword";
         ModuleName = "PsDesiredStateConfiguration";
         ValueData = {
            "ff"
        };
         Hex = True;
        ModuleVersion = "0.0";
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_ArchiveResource as $MSFT_ArchiveResource1ref
        {
        ResourceID = "[Archive]UnzipSpInstaller::[SharePointServer]x::[SharePointServer]x";
         Path = "C:\\config\\sources\\installer.zip";
         Ensure = "Present";
         Destination = "D:\\binaries";
         ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "0.0";
        DependsOn = {
            "[Disk]SecondaryDisk::[SharePointServer]x::[SharePointServer]x",
             "[Registry]DisableIPv6::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_xCredSSP as $MSFT_xCredSSP1ref
        {
        ResourceID = "[xCredSSP]CredSSPServer::[SharePointServer]x::[SharePointServer]x";
         Role = "Server";
         Ensure = "Present";
         ModuleName = "xCredSSP";
         ModuleVersion = "1.0.1";
        DependsOn = {
            "[Computer]DomainJoin::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_xCredSSP as $MSFT_xCredSSP2ref
        {
        ResourceID = "[xCredSSP]CredSSPClient::[SharePointServer]x::[SharePointServer]x";
         Role = "Client";
         Ensure = "Present";
         ModuleName = "xCredSSP";
         ModuleVersion = "1.0.1";
         DelegateComputers = {
            "*.${DomainDNSName}"
        };
        DependsOn = {
            "[Computer]DomainJoin::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_RoleResource as $MSFT_RoleResource1ref
        {
        ResourceID = "[WindowsFeature]Feature-RSAT-ADDS::[SharePointServer]x::[SharePointServer]x";
         Ensure = "Present";
         Name = "RSAT-ADDS";
         ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "0.0";
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_RoleResource as $MSFT_RoleResource2ref
        {
        ResourceID = "[WindowsFeature]Feature-RSAT-AD-AdminCenter::[SharePointServer]x::[SharePointServer]x";
         Ensure = "Present";
         Name = "RSAT-AD-AdminCenter";
         ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "0.0";
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_RoleResource as $MSFT_RoleResource3ref
        {
        ResourceID = "[WindowsFeature]Feature-RSAT-ADDS-Tools::[SharePointServer]x::[SharePointServer]x";
         Ensure = "Present";
         Name = "RSAT-ADDS-Tools";
         ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "0.0";
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_RoleResource as $MSFT_RoleResource4ref
        {
        ResourceID = "[WindowsFeature]Feature-RSAT-AD-PowerShell::[SharePointServer]x::[SharePointServer]x";
         Ensure = "Present";
         Name = "RSAT-AD-PowerShell";
         ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "0.0";
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential2ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPFarmAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential3ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${ADAdminSecret}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser1ref
        {
        ResourceID = "[xADUser]User-farm::[SharePointServer]x::[SharePointServer]x";
         UserName = "${GenerateUsernames.farm}";
         Ensure = "Present";
         Password = $MSFT_Credential2ref;
         DomainAdministratorCredential = $MSFT_Credential3ref;
         DomainName = "${DomainDNSName}";
         ModuleName = "xActiveDirectory";
         ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential4ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSuperUserAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential5ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${ADAdminSecret}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser2ref
        {
        ResourceID = "[xADUser]User-super::[SharePointServer]x::[SharePointServer]x";
         UserName = "${GenerateUsernames.super}";
         Ensure = "Present";
         Password = $MSFT_Credential4ref;
         DomainAdministratorCredential = $MSFT_Credential5ref;
         DomainName = "${DomainDNSName}";
         ModuleName = "xActiveDirectory";
         ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential6ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential7ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${ADAdminSecret}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser3ref
        {
        ResourceID = "[xADUser]User-setup::[SharePointServer]x::[SharePointServer]x";
         UserName = "${GenerateUsernames.setup}";
         Ensure = "Present";
         Password = $MSFT_Credential6ref;
         DomainAdministratorCredential = $MSFT_Credential7ref;
         DomainName = "${DomainDNSName}";
         ModuleName = "xActiveDirectory";
         ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential8ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPReaderAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential9ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${ADAdminSecret}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser4ref
        {
        ResourceID = "[xADUser]User-reader::[SharePointServer]x::[SharePointServer]x";
         UserName = "${GenerateUsernames.reader}";
         Ensure = "Present";
         Password = $MSFT_Credential8ref;
         DomainAdministratorCredential = $MSFT_Credential9ref;
         DomainName = "${DomainDNSName}";
         ModuleName = "xActiveDirectory";
         ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential10ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSvcAppAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential11ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${ADAdminSecret}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser5ref
        {
        ResourceID = "[xADUser]User-svc::[SharePointServer]x::[SharePointServer]x";
         UserName = "${GenerateUsernames.svc}";
         Ensure = "Present";
         Password = $MSFT_Credential10ref;
         DomainAdministratorCredential = $MSFT_Credential11ref;
         DomainName = "${DomainDNSName}";
         ModuleName = "xActiveDirectory";
         ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential12ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPCrawlAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential13ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${ADAdminSecret}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser6ref
        {
        ResourceID = "[xADUser]User-crawl::[SharePointServer]x::[SharePointServer]x";
         UserName = "${GenerateUsernames.crawl}";
         Ensure = "Present";
         Password = $MSFT_Credential12ref;
         DomainAdministratorCredential = $MSFT_Credential13ref;
         DomainName = "${DomainDNSName}";
         ModuleName = "xActiveDirectory";
         ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential14ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPUPSyncAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential15ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${ADAdminSecret}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser7ref
        {
        ResourceID = "[xADUser]User-sync::[SharePointServer]x::[SharePointServer]x";
         UserName = "${GenerateUsernames.sync}";
         Ensure = "Present";
         Password = $MSFT_Credential14ref;
         DomainAdministratorCredential = $MSFT_Credential15ref;
         DomainName = "${DomainDNSName}";
         ModuleName = "xActiveDirectory";
         ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential16ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPWebAppAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential17ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${ADAdminSecret}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser8ref
        {
        ResourceID = "[xADUser]User-web::[SharePointServer]x::[SharePointServer]x";
         UserName = "${GenerateUsernames.web}";
         Ensure = "Present";
         Password = $MSFT_Credential16ref;
         DomainAdministratorCredential = $MSFT_Credential17ref;
         DomainName = "${DomainDNSName}";
         ModuleName = "xActiveDirectory";
         ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential18ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${ADAdminSecret}";
        };
        instance of MSFT_GroupResource as $MSFT_GroupResource1ref
        {
        ResourceID = "[Group]LocalAdministrators::[SharePointServer]x::[SharePointServer]x";
         MembersToInclude = {
            "${DomainNetBIOSName}\\${GenerateUsernames.setup}"
        };
         Ensure = "Present";
         GroupName = "Administrators";
         ModuleName = "PsDesiredStateConfiguration";
         Credential = $MSFT_Credential18ref;
        ModuleVersion = "0.0";
        DependsOn = {
            "[xADUser]User-svc::[SharePointServer]x::[SharePointServer]x",
             "[Computer]DomainJoin::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_SPInstallPrereqs as $MSFT_SPInstallPrereqs1ref
        {
        ResourceID = "[SPInstallPrereqs]InstallPrereqs::[SharePointServer]x::[SharePointServer]x";
         OnlineMode = True;
         Ensure = "Present";
         IsSingleInstance = "Yes";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
         InstallerPath = "D:\\binaries\\prerequisiteinstaller.exe";
        DependsOn = {
            "[Group]LocalAdministrators::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_xWebAppPool as $MSFT_xWebAppPool1ref
        {
        ResourceID = "[xWebAppPool]RemoveDotNet2Pool::[SharePointServer]x::[SharePointServer]x";
         Ensure = "Absent";
         Name = ".NET v2.0";
         ModuleName = "xWebAdministration";
         ModuleVersion = "2.5.0.0";
        DependsOn = {
            "[SPInstallPrereqs]InstallPrereqs::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_xWebAppPool as $MSFT_xWebAppPool2ref
        {
        ResourceID = "[xWebAppPool]RemoveDotNet2ClassicPool::[SharePointServer]x::[SharePointServer]x";
         Ensure = "Absent";
         Name = ".NET v2.0 Classic";
         ModuleName = "xWebAdministration";
         ModuleVersion = "2.5.0.0";
        DependsOn = {
            "[SPInstallPrereqs]InstallPrereqs::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_xWebAppPool as $MSFT_xWebAppPool3ref
        {
        ResourceID = "[xWebAppPool]RemoveDotNet45Pool::[SharePointServer]x::[SharePointServer]x";
         Ensure = "Absent";
         Name = ".NET v4.5";
         ModuleName = "xWebAdministration";
         ModuleVersion = "2.5.0.0";
        DependsOn = {
            "[SPInstallPrereqs]InstallPrereqs::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_xWebAppPool as $MSFT_xWebAppPool4ref
        {
        ResourceID = "[xWebAppPool]RemoveDotNet45ClassicPool::[SharePointServer]x::[SharePointServer]x";
         Ensure = "Absent";
         Name = ".NET v4.5 Classic";
         ModuleName = "xWebAdministration";
         ModuleVersion = "2.5.0.0";
        DependsOn = {
            "[SPInstallPrereqs]InstallPrereqs::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_xWebAppPool as $MSFT_xWebAppPool5ref
        {
        ResourceID = "[xWebAppPool]RemoveClassicDotNetPool::[SharePointServer]x::[SharePointServer]x";
         Ensure = "Absent";
         Name = "Classic .NET AppPool";
         ModuleName = "xWebAdministration";
         ModuleVersion = "2.5.0.0";
        DependsOn = {
            "[SPInstallPrereqs]InstallPrereqs::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_xWebAppPool as $MSFT_xWebAppPool6ref
        {
        ResourceID = "[xWebAppPool]RemoveDefaultAppPool::[SharePointServer]x::[SharePointServer]x";
         Ensure = "Absent";
         Name = "DefaultAppPool";
         ModuleName = "xWebAdministration";
         ModuleVersion = "2.5.0.0";
        DependsOn = {
            "[SPInstallPrereqs]InstallPrereqs::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_xWebsite as $MSFT_xWebsite1ref
        {
        ResourceID = "[xWebsite]RemoveDefaultWebSite::[SharePointServer]x::[SharePointServer]x";
         PhysicalPath = "C:\\inetpub\\wwwroot";
         Ensure = "Absent";
         Name = "Default Web Site";
         ModuleName = "xWebAdministration";
         ModuleVersion = "2.5.0.0";
        DependsOn = {
            "[SPInstallPrereqs]InstallPrereqs::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_SPInstall as $MSFT_SPInstall1ref
        {
        ResourceID = "[SPInstall]InstallSharePoint::[SharePointServer]x::[SharePointServer]x";
         ProductKey = "${SPProductKey}";
         Ensure = "Present";
         BinaryDir = "D:\\binaries";
         IsSingleInstance = "Yes";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPInstallPrereqs]InstallPrereqs::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential19ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SQLAdminSecret}";
        };
        instance of MSFT_ScriptResource as $MSFT_ScriptResource2ref
        {
        ResourceID = "[Script]SetMAXDOP::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential19ref;
         GetScript = "return @{}";
         TestScript = "\n                $conn = new-object system.data.SqlClient.SQLConnection(\"Data Source=`${SPDatabaseName}; Integrated Security=SSPI; Initial Catalog=master\")\n                $cmd = new-object system.data.sqlclient.sqlcommand('EXEC sp_configure ''show advanced options'', 1; RECONFIGURE; EXEC sp_configure ''max degree of parallelism'';',$conn)\n                $conn.Open()\n                $a = New-Object System.Data.sqlclient.sqlDataAdapter $cmd\n                $ds = New-Object System.Data.DataSet\n                $a.Fill($ds) | Out-Null\n                $conn.Close()\n                if ($ds.Tables[0].Rows.Count -ne 1) {return $false}\n                if ($ds.Tables[0].Rows[0].run_value -ne 1) {return $false}\n                return $true\n            ";
         SetScript = "\n                $conn = new-object system.data.SqlClient.SQLConnection(\"Data Source=`${SPDatabaseName}; Integrated Security=SSPI; Initial Catalog=master\")\n                $cmd = new-object system.data.sqlclient.sqlcommand('EXEC sp_configure ''show advanced options'', 1; RECONFIGURE; EXEC sp_configure ''max degree of parallelism'', 1; RECONFIGURE;',$conn)\n                $conn.Open()\n                $cmd.ExecuteNonQuery()\n                $conn.Close()\n            ";
         ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "0.0";
        DependsOn = {
            "[SPInstall]InstallSharePoint::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential20ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SQLAdminSecret}";
        };
        instance of MSFT_ScriptResource as $MSFT_ScriptResource3ref
        {
        ResourceID = "[Script]SQLPermissions::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential20ref;
         GetScript = "return @{}";
         TestScript = "\n                $conn = new-object system.data.SqlClient.SQLConnection(\"Data Source=`${SPDatabaseName}; Integrated Security=SSPI; Initial Catalog=master\")\n                $cmd = new-object system.data.sqlclient.sqlcommand('SELECT spU.name,MAX(CASE WHEN srm.role_principal_id = 4 THEN 1 END) AS securityadmin,MAX(CASE WHEN srm.role_principal_id = 9 THEN 1 END) AS dbcreator FROM sys.server_principals AS spR JOIN sys.server_role_members AS srm ON spR.principal_id = srm.role_principal_id JOIN sys.server_principals AS spU ON srm.member_principal_id = spU.principal_id WHERE spR.[type] = ''R'' AND spU.name = ''${DomainNetBIOSName}\\${GenerateUsernames.setup}'' GROUP BY spU.name',$conn)\n                $conn.Open()\n                $a = New-Object System.Data.sqlclient.sqlDataAdapter $cmd\n                $ds = New-Object System.Data.DataSet\n                $a.Fill($ds) | Out-Null\n                $conn.Close()\n                if ($ds.Tables[0].Rows.Count -ne 1) {return $false}\n                if ($ds.Tables[0].Rows[0].securityadmin -ne 1) {return $false}\n                if ($ds.Tables[0].Rows[0].dbcreator -ne 1) {return $false}\n                return $true\n            ";
         SetScript = "\n                $conn = new-object system.data.SqlClient.SQLConnection(\"Data Source=`${SPDatabaseName}; Integrated Security=SSPI; Initial Catalog=master\")\n                $cmd = new-object system.data.sqlclient.sqlcommand('CREATE LOGIN [${DomainNetBIOSName}\\${GenerateUsernames.setup}] FROM WINDOWS; EXEC sp_addsrvrolemember ''${DomainNetBIOSName}\\${GenerateUsernames.setup}'', ''dbcreator''; EXEC sp_addsrvrolemember ''${DomainNetBIOSName}\\${GenerateUsernames.setup}'', ''securityadmin''; GRANT CONNECT SQL TO [${DomainNetBIOSName}\\${GenerateUsernames.setup}];',$conn)\n                $conn.Open()\n                $cmd.ExecuteNonQuery()\n                $conn.Close()\n            ";
         ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "0.0";
        DependsOn = {
            "[SPInstall]InstallSharePoint::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential21ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential22ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPPassPhrase}";
        };
        instance of MSFT_Credential as $MSFT_Credential23ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPFarmAccount}";
        };
        instance of MSFT_SPFarm as $MSFT_SPFarm1ref
        {
        IsSingleInstance = "Yes";
         Ensure = "Present";
         FarmConfigDatabaseName = "${GenerateUsernames.db}_Config";
         PsDscRunAsCredential = $MSFT_Credential21ref;
         ResourceID = "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x";
         DatabaseServer = "${SPDatabaseName}";
         Passphrase = $MSFT_Credential22ref;
         RunCentralAdmin = True;
         ModuleVersion = "3.4.0.0";
         ModuleName = "SharePointDSC";
         FarmAccount = $MSFT_Credential23ref;
         AdminContentDatabaseName = "${GenerateUsernames.db}_AdminContent";
        DependsOn = {
            "[Script]SQLPermissions::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential24ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPAlternateUrl as $MSFT_SPAlternateUrl1ref
        {
        ResourceID = "[SPAlternateUrl]CentralAdminAAM::[SharePointServer]x::[SharePointServer]x";
         WebAppName = "SharePoint Central Administration v4";
         PsDscRunAsCredential = $MSFT_Credential24ref;
         Url = "http://{tag:Name}.${DomainDNSName}:9999";
         Ensure = "Present";
         ModuleName = "SharePointDSC";
         Zone = "Intranet";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential25ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential26ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSvcAppAccount}";
        };
        instance of MSFT_SPManagedAccount as $MSFT_SPManagedAccount1ref
        {
        ResourceID = "[SPManagedAccount]ServicePoolManagedAccount::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential25ref;
         AccountName = "${DomainNetBIOSName}\\${GenerateUsernames.svc}";
         ModuleName = "SharePointDSC";
         Account = $MSFT_Credential26ref;
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential27ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential28ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPWebAppAccount}";
        };
        instance of MSFT_SPManagedAccount as $MSFT_SPManagedAccount2ref
        {
        ResourceID = "[SPManagedAccount]WebPoolManagedAccount::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential27ref;
         AccountName = "${DomainNetBIOSName}\\${GenerateUsernames.web}";
         ModuleName = "SharePointDSC";
         Account = $MSFT_Credential28ref;
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential29ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPDiagnosticLoggingSettings as $MSFT_SPDiagnosticLoggingSettings1ref
        {
        LogMaxDiskSpaceUsageEnabled = True;
         EventLogFloodProtectionEnabled = True;
         EventLogFloodProtectionQuietPeriod = 2;
         ResourceID = "[SPDiagnosticLoggingSettings]ApplyDiagnosticLogSettings::[SharePointServer]x::[SharePointServer]x";
         AppAnalyticsAutomaticUploadEnabled = False;
         DownloadErrorReportingUpdatesEnabled = False;
         ScriptErrorReportingEnabled = True;
         LogSpaceInGB = 5;
         PsDscRunAsCredential = $MSFT_Credential29ref;
         ScriptErrorReportingRequireAuth = True;
         IsSingleInstance = "Yes";
         EventLogFloodProtectionTriggerPeriod = 2;
         ErrorReportingEnabled = False;
         ScriptErrorReportingDelay = 30;
         DaysToKeepLogs = 7;
         LogCutInterval = 15;
         ModuleVersion = "3.4.0.0";
         ModuleName = "SharePointDSC";
         EventLogFloodProtectionThreshold = 5;
         ErrorReportingAutomaticUploadEnabled = False;
         CustomerExperienceImprovementProgramEnabled = True;
         EventLogFloodProtectionNotifyInterval = 5;
         LogPath = "D:\\ULS";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential30ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPUsageApplication as $MSFT_SPUsageApplication1ref
        {
        ResourceID = "[SPUsageApplication]UsageApplication::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential30ref;
         UsageLogCutTime = 5;
         UsageLogMaxFileSizeKB = 1024;
         DatabaseName = "${GenerateUsernames.db}_Usage";
         Name = "Usage Service Application";
         UsageLogLocation = "D:\\UsageLogs";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential31ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPStateServiceApp as $MSFT_SPStateServiceApp1ref
        {
        ResourceID = "[SPStateServiceApp]StateServiceApp::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential31ref;
         DatabaseName = "${GenerateUsernames.db}_State";
         Name = "State Service Application";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential32ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPDistributedCacheService as $MSFT_SPDistributedCacheService1ref
        {
        ResourceID = "[SPDistributedCacheService]EnableDistributedCache::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential32ref;
         Ensure = "Present";
         ServiceAccount = "${DomainNetBIOSName}\\${GenerateUsernames.svc}";
         Name = "AppFabricCachingService";
         CreateFirewallRules = True;
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
         CacheSizeInMB = 1024;
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x",
             "[SPManagedAccount]ServicePoolManagedAccount::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential33ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPWebApplication as $MSFT_SPWebApplication1ref
        {
        HostHeader = "{tag:Name}.${DomainDNSName}";
         PsDscRunAsCredential = $MSFT_Credential33ref;
         Name = "SharePoint Sites";
         ResourceID = "[SPWebApplication]SharePointSites::[SharePointServer]x::[SharePointServer]x";
         DatabaseName = "${GenerateUsernames.db}_Content";
         ApplicationPoolAccount = "${DomainNetBIOSName}\\${GenerateUsernames.web}";
         AllowAnonymous = False;
         ApplicationPool = "SharePoint Sites";
         WebAppUrl = "http://{tag:Name}.${DomainDNSName}";
         ModuleVersion = "3.4.0.0";
         ModuleName = "SharePointDSC";
         Port = "80";
        DependsOn = {
            "[SPManagedAccount]WebPoolManagedAccount::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_ScriptResource as $MSFT_ScriptResource4ref
        {
        ResourceID = "[Script]RebootOnFirstRunOfWebApp::[SharePointServer]x::[SharePointServer]x";
         GetScript = "return @{}";
         TestScript = "\n                $value = Get-ItemProperty -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart -ErrorAction SilentlyContinue\n                if ($null -eq $value) { return $false }\n                if ($value.SPWebAppReboot -eq $true) { return $true }\n                return $false\n            ";
         SetScript = "\n                New-Item -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart -ErrorAction SilentlyContinue\n                Set-ItemProperty -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart -Name SPWebAppReboot -Value $true\n                $global:DSCMachineStatus = 1\n            ";
         ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "0.0";
        DependsOn = {
            "[SPWebApplication]SharePointSites::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential34ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPCacheAccounts as $MSFT_SPCacheAccounts1ref
        {
        ResourceID = "[SPCacheAccounts]WebAppCacheAccounts::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential34ref;
         WebAppUrl = "http://{tag:Name}.${DomainDNSName}";
         ModuleName = "SharePointDSC";
         SuperReaderAlias = "${DomainNetBIOSName}\\${GenerateUsernames.reader}";
         ModuleVersion = "3.4.0.0";
         SuperUserAlias = "${DomainNetBIOSName}\\${GenerateUsernames.super}";
        DependsOn = {
            "[SPWebApplication]SharePointSites::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential35ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPServiceInstance as $MSFT_SPServiceInstance1ref
        {
        ResourceID = "[SPServiceInstance]ClaimsToWindowsTokenServiceInstance::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential35ref;
         Ensure = "Present";
         Name = "Claims to Windows Token Service";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential36ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPServiceInstance as $MSFT_SPServiceInstance2ref
        {
        ResourceID = "[SPServiceInstance]SecureStoreServiceInstance::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential36ref;
         Ensure = "Present";
         Name = "Secure Store Service";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential37ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPServiceInstance as $MSFT_SPServiceInstance3ref
        {
        ResourceID = "[SPServiceInstance]ManagedMetadataServiceInstance::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential37ref;
         Ensure = "Present";
         Name = "Managed Metadata Web Service";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential38ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPServiceInstance as $MSFT_SPServiceInstance4ref
        {
        ResourceID = "[SPServiceInstance]BCSServiceInstance::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential38ref;
         Ensure = "Present";
         Name = "Business Data Connectivity Service";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential39ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPServiceInstance as $MSFT_SPServiceInstance5ref
        {
        ResourceID = "[SPServiceInstance]SearchServiceInstance::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential39ref;
         Ensure = "Present";
         Name = "SharePoint Server Search";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential40ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPServiceInstance as $MSFT_SPServiceInstance6ref
        {
        ResourceID = "[SPServiceInstance]CentralAdmin::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential40ref;
         Ensure = "Present";
         Name = "Central Administration";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential41ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPServiceAppPool as $MSFT_SPServiceAppPool1ref
        {
        ResourceID = "[SPServiceAppPool]MainServiceAppPool::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential41ref;
         ServiceAccount = "${DomainNetBIOSName}\\${GenerateUsernames.svc}";
         Name = "SharePoint Service Applications";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPFarm]CreateSPFarm::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential42ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPSecureStoreServiceApp as $MSFT_SPSecureStoreServiceApp1ref
        {
        ResourceID = "[SPSecureStoreServiceApp]SecureStoreServiceApp::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential42ref;
         AuditingEnabled = True;
         AuditlogMaxSize = 30;
         ApplicationPool = "SharePoint Service Applications";
         DatabaseName = "${GenerateUsernames.db}_SecureStore";
         Name = "Secure Store Service Application";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPServiceAppPool]MainServiceAppPool::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential43ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPManagedMetaDataServiceApp as $MSFT_SPManagedMetaDataServiceApp1ref
        {
        ResourceID = "[SPManagedMetaDataServiceApp]ManagedMetadataServiceApp::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential43ref;
         ApplicationPool = "SharePoint Service Applications";
         DatabaseName = "${GenerateUsernames.db}_MMS";
         Name = "Managed Metadata Service Application";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPServiceAppPool]MainServiceAppPool::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential44ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPBCSServiceApp as $MSFT_SPBCSServiceApp1ref
        {
        ResourceID = "[SPBCSServiceApp]BCSServiceApp::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential44ref;
         ApplicationPool = "SharePoint Service Applications";
         DatabaseName = "${GenerateUsernames.db}_BCS";
         Name = "BCS Service Application";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
         DatabaseServer = "${SPDatabaseName}";
        DependsOn = {
            "[SPServiceAppPool]MainServiceAppPool::[SharePointServer]x::[SharePointServer]x",
             "[SPSecureStoreServiceApp]SecureStoreServiceApp::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential45ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPSearchServiceApp as $MSFT_SPSearchServiceApp1ref
        {
        ResourceID = "[SPSearchServiceApp]SearchServiceApp::[SharePointServer]x::[SharePointServer]x";
         PsDscRunAsCredential = $MSFT_Credential45ref;
         ApplicationPool = "SharePoint Service Applications";
         DatabaseName = "${GenerateUsernames.db}_Search";
         Name = "Search Service Application";
         ModuleName = "SharePointDSC";
         ModuleVersion = "3.4.0.0";
        DependsOn = {
            "[SPServiceAppPool]MainServiceAppPool::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential46ref
        {
        Password = "ThisWillLoadAtRunTime";
         UserName = "${SPSetupAccount}";
        };
        instance of MSFT_SPSearchTopology as $MSFT_SPSearchTopology1ref
        {
        Crawler = {
            "{tag:Name}"
        };
         PsDscRunAsCredential = $MSFT_Credential46ref;
         ResourceID = "[SPSearchTopology]SearchTopology::[SharePointServer]x::[SharePointServer]x";
         FirstPartitionDirectory = "D:\\search";
         ContentProcessing = {
            "{tag:Name}"
        };
         IndexPartition = {
            "{tag:Name}"
        };
         ServiceAppName = "Search Service Application";
         QueryProcessing = {
            "{tag:Name}"
        };
         AnalyticsProcessing = {
            "{tag:Name}"
        };
         ModuleVersion = "3.4.0.0";
         ModuleName = "SharePointDSC";
         Admin = {
            "{tag:Name}"
        };
        DependsOn = {
            "[SPSearchServiceApp]SearchServiceApp::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of MSFT_ScriptResource as $MSFT_ScriptResource5ref
        {
        ResourceID = "[Script]SignalCFN::[SharePointServer]x::[SharePointServer]x";
         GetScript = " return @{} ";
         TestScript = "\n                $value = Get-ItemProperty -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart -ErrorAction SilentlyContinue\n                if ($null -eq $value) { return $false }\n                if ($value.SignalSent -eq $true) { return $true }\n                return $false\n            ";
         SetScript = "\n                Start-Process -FilePath \"cfn-signal.exe\" -ArgumentList @(\"-s\", \"true\", (Get-ItemProperty -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart).SignalUrl) -PassThru -Wait\n                New-Item -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart -ErrorAction SilentlyContinue\n                Set-ItemProperty -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart -Name SignalSent -Value $true\n            ";
         ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "0.0";
        DependsOn = {
            "[SPSearchTopology]SearchTopology::[SharePointServer]x::[SharePointServer]x"};
         ConfigurationName = "SharePointServer";
        };
        instance of OMI_ConfigurationDocument
                            {
         Version="2.0.0";
                                MinimumCompatibleVersion = "2.0.0";
                                CompatibleVersionAdditionalProperties= {"Omi_BaseResource:ConfigurationName"};
                                Name="SharePointServer";
                            };

  SharePointServerDSCAssoication:
    Type: AWS::SSM::Association
    DependsOn:
     - WriteSingleServerMOF
    Properties: 
      AssociationName: SharePointSingleServer
      Name: AWS-ApplyDSCMofs
      Targets:
        - Key: InstanceIds
          Values: [ !Ref SharePointServer ]
      Parameters:
        MofsToApply: 
          - !Sub "s3:${DSCBucket}:SP-Single-${AWS::StackName}.mof"
        ServicePath:
          - default
        MofOperationMode:
          - Apply
        ComplianceType:
          - Custom:QSSPSingle
        ReportBucketName:
          - ""
        StatusBucketName:
          - ""
        ModuleSourceBucketName:
          - "NONE"
        AllowPSGalleryModuleSource:
          - "True"
        ProxyUri:
          - ""
        RebootBehavior:
          - "Immediately"
        UseComputerNameForReporting:
          - "False"
        EnableVerboseLogging:
          - "False"
        EnableDebugLogging:
          - "False"
        PreRebootScript:
          - ""
      ScheduleExpression: cron(0/30 * * * ? *)
      OutputLocation:
        S3Location: 
          OutputS3BucketName: !Ref DSCBucket
          OutputS3KeyPrefix: 'logs/'

  GenerateUsernamesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  GenerateUsernamesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub >
          var AWS = require('aws-sdk'), s3 = new AWS.S3();
          const response = require("cfn-response");

          exports.handler = async (event, context) => {
            console.log(JSON.stringify(event));

            if (event.RequestType === 'Delete') {
                await postResponse(event, context, response.SUCCESS, {})
                return;
            }

            function postResponse(event, context, status, data){
                return new Promise((resolve, reject) => {
                    setTimeout(() => response.send(event, context, status, data), 5000)
                });
            }

            function makeid(length) {
              var text = "";
              var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
              for (var i = 0; i < length; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));
              return text;
            }

            var prefix = "${AWS::StackName}".substring(0,8)
            var id = makeid(4)
            await postResponse(event, context, response.SUCCESS, {
              setup: (prefix + '-setup-' + id),
              farm: (prefix + '-farm-' + id),
              web: (prefix + '-webapp-' + id),
              svc: (prefix + '-svcapp-' + id),
              crawl: (prefix + '-crawl-' + id),
              sync: (prefix + '-upsync-' + id),
              super: (prefix + '-supusr-' + id),
              reader: (prefix + '-suprdr-' + id),
              db: (prefix + '_' + id),
              prefix: id
            });
          };
      Handler: index.handler
      Role: !GetAtt GenerateUsernamesRole.Arn
      Runtime: nodejs10.x
      Timeout: 10

  GenerateUsernames:
    Type: Custom::DataLookupFunction
    Properties:
      ServiceToken: !GetAtt GenerateUsernamesFunction.Arn
  
  ADAdminSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/ADAdmin'
      Description: Account with permissions to act on Active Directory
      SecretString: !Sub '{"username":"${DomainNetBIOSName}\\${ADAdminUserName}","password":"${ADAdminPassword}"}'

  SQLAdminSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SQLAdmin'
      Description: Account with permissions to act on SQL Server
      SecretString: !Sub '{"username":"${DomainNetBIOSName}\\${SQLAdminUserName}","password":"${SQLAdminPassword}"}'

  SPSetupAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPSetup'
      Description: Account used to install SharePoint in the AWS SharePoint QuickStart
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub:
            - '{"username": "${domain}\\${user}"}'
            - { domain: !Ref DomainNetBIOSName, user: !Sub "${GenerateUsernames.setup}" }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPFarmAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPFarm'
      Description: Account used as primary SharePoint farm account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub:
            - '{"username": "${domain}\\${user}"}'
            - { domain: !Ref DomainNetBIOSName, user: !Sub "${GenerateUsernames.farm}" }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPWebAppAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPWebApp'
      Description: Account used as primary SharePoint web app service account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate: 
          Fn::Sub:
            - '{"username": "${domain}\\${user}"}'
            - { domain: !Ref DomainNetBIOSName , user: !Sub "${GenerateUsernames.web}" }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPSvcAppAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPSvcApp'
      Description: Account used as primary SharePoint service app service account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub:
            - '{"username": "${domain}\\${user}"}'
            - { domain: !Ref DomainNetBIOSName, user: !Sub "${GenerateUsernames.svc}" }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
  
  SPCrawlAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPCrawl'
      Description: Account used as primary SharePoint search crawl account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate: 
          Fn::Sub:
            - '{"username": "${domain}\\${user}"}'
            - { domain: !Ref DomainNetBIOSName, user: !Sub "${GenerateUsernames.crawl}" }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPUPSyncAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPUPSync'
      Description: Account used as primary SharePoint user profile sync account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub:
            - '{"username": "${domain}\\${user}"}'
            - { domain: !Ref DomainNetBIOSName, user: !Sub "${GenerateUsernames.sync}" }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPSuperUserAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPSuperUser'
      Description: Account used as primary SharePoint super user account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub:
            - '{"username": "${domain}\\${user}"}'
            - { domain: !Ref DomainNetBIOSName, user: !Sub "${GenerateUsernames.super}" }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPReaderAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPReader'
      Description: Account used as primary SharePoint super user account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate: 
          Fn::Sub:
            - '{"username": "${domain}\\${user}"}'
            - { domain: !Ref DomainNetBIOSName, user: !Sub "${GenerateUsernames.reader}" }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPPassPhrase:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/Passphrase'
      Description: Account used as farm passphrase in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate: '{"username": "passphrase"}'
        GenerateStringKey: "password"
        PasswordLength: 15
        ExcludeCharacters: '"@/\'

Outputs:
  CentralAdminUrl:
    Description: The URL to access the Central Admin site for this server
    Value: !Sub "http://${SPServerNetBIOSName}.${DomainDNSName}:9999"
